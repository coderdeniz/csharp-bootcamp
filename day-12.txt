
Autofac: IOC container, projedeki baðýmlýlýklarý çözebilmemizi yarar buna benzer yapý dotnet'de built-in'de mevcut fakat interception gibi aop destekli çalýþmalarda yardýmcý olmasý için autofac kulllanýyoruz.

not: dependency'ler genelde business katmanýnda yapýlýr api'de yapýlýrsa birden fazla api eklenmesi durumunda her birine teker teker eklemek durumunda kalýrýz.

paketler: autofac ve interception için autofac.extras.dynamicproxy

not: business içerisinde dependencyresolvers/autofac içerisinde baðýmlýlýklarýmýzý çözeceðimiz klasör.

örnek kullaným:  builder.RegisterType<ProductManager>().As<IProductService>().SingleInstance();
data kullanýlmadýðý için (data taþýma dýþýnda) built-in'deki singleton karþýlýðý singleInstance diyoruz.



Business kodu ile doðrulama(validation) kodu birbirinden ayrýlmasý gerekmektedir.

validation: bir nesnenin iþ kurallarýna girebilmesini kontrol ettiðimiz kýsýmdýr. Gerekli þartlarý saðlamýyorsa iþ kurallarýna sokulmaz.


not: validation iþlerini business'dan ayýrmak için ValidationRules klasörünü oluþturuyoruz. Fluent Validation yapýsý kullanýyoruz.



Cross Cutting Concerns: Uygulamalarý dikine kesen yapýlara denir, yani her katmanda kullanýlabilecek yapýlar örnek: log, cache, doðrulama(validation), transaction, authorization gibi.


Fluent Validation'da bir CCC olduðu için onu da CCC'ye alabilir yani Core katmanýnda.



